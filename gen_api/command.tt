
=item [% prefix %][% name %]

Wrapper method for [% name %] API

[% details.doc %]

=over

=item [% -%]
[%- IF check_hash(details.takes_args).size -%]
Required arguments

=over
[%      FOREACH arg IN check_hash(details.takes_args) %]
=item [% arg.name %]: [% arg.doc %] ([% arg.multivalue ? 'arrayref of ' : ''  %]type [% arg.type %] class [% arg.class %])
[%      END %]
=back
[% ELSE -%]
No required arguments
[%- END %]

=item  Options

=over
[%      FOREACH opt IN check_hash(details.takes_options) %]
=item [% opt.name %]: [% opt.doc %] ([% opt.multivalue ? 'arrayref of ' : ''  %]type [% opt.type %] class [% opt.class %])
[%      END -%]

=item All options starting with C<__> are passed as options to C<Net::FreeIPA::RPC::rpc>.

=back

=back

=cut

sub [% prefix %][% name %]
{
[%- FILTER indent %]
my (\$self
[%- check_hash(details.takes_args).size ? ', ' _ join_name_vars(check_hash(details.takes_args)) : '' -%]
, %opts[% -%]
) = @_;

return \$self->rpc_api('[% name %]',
[%-     FILTER indent %]
[[%- join_name_vars(check_hash(details.takes_args)) -%]],
[qw([%- join_name(check_hash(details.takes_args)) %])],
[qw([%- join_type(check_hash(details.takes_args)) -%])],
\%opts,
[qw([%- join_name(check_hash(details.takes_options)) -%])],
[qw([%- join_type(check_hash(details.takes_options)) -%])],
[%-      END %]
);
[%- END %]
}
